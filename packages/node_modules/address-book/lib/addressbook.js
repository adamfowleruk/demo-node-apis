const express = require('express')
const hateoasLinker = require('express-hateoas-links');

const app = express()
const port = process.env.PORT || 3000

var addresses = [
  {"forename": "Adam", "surname": "Fowler", "number": "555-123-456"},
  {"forename": "Leo", "surname": "Fowler", "number": "555-123-444"},
  {"forename": "Zack", "surname": "Fowler", "number": "555-123-666"},
  {"forename": "Jess", "surname": "Williams", "number": "555-123-777"},
]

const replacer = function (req, href) {
  // Are we an explicit reference to another service?
  const replacements = req.get("X-HttpReplaceURLPrefixes");
  if (undefined != replacements) {
    // Now separate out replacements
    const splits = replacements.split(";");
    var replacement = href;
    for (var i = 0;i < splits.length;i++) {
      var parts = splits[i].split("=");
      if (replacement.startsWith(parts[0])) {
        replacement = parts[1] + replacement.substring(parts[0].length);
      }
    }
    return replacement;
  }

  // See if we're a plain root (i.e. this service) url, or under the root (no host specified)
  if (href.startsWith("/")) {
    const serviceUrl = req.get("X-HttpServiceURL");
    if (undefined != serviceUrl) {
      return serviceUrl + href.substring(1);
    }
    return href;
  }
}


module.exports = {
  start: function (settings) {

    // replace standard express res.json with the new version
    app.use(hateoasLinker);

    app.get('/', (req, res) => {

      // create an example JSON Schema
      var addressSchema = {
        "name": "Address",
        "description": "This JSON Schema defines the parameters required to create an Address object",
        "properties": {
            "forename": {
                "title": "Forename",
                "description": "Please enter your forename",
                "type": "string",
                "maxLength": 30,
                "minLength": 1,
                "required": true
            },
            "surname": {
                "title": "Surname",
                "type": "string"
            },
            "number": {
                "title": "Telephone Number",
                "description": "Please enter telephone number",
                "type": "string",
                "required": true
            }
          }
      };
    
      res.json(addressSchema, [
          {rel: "self", method: "GET", href: replacer(req,"/")},
          {rel: "list", method: "GET", href: replacer(req,"/list")},
          {rel: "create", method: "PUT", href: replacer(req,"/")}
        ]
      )
    })

    app.get('/list', (req, res) => {
      var addressesOut = []
      for (var i = 0;i < addresses.length; i++) {
        addressesOut.push({
          "addressId": i,
          "forename": addresses[i].forename,
          "surname": addresses[i].surname,
          "number": addresses[i].number,
          "links": {
            "view": replacer(req,"/" + i),
            "edit": replacer(req,"/" + i + "/update"),
            "delete": replacer(req,"/" + i + "/delete")
          }
        })
      }

      res.json({
        "address-count": addresses.length,
        "addresses" : addresses
      }, [
        {rel: "self", method: "GET", href: replacer(req,"/list")}
      ])
    })

    // TODO add app.get(/:idx) to return array index value (single address get)

    app.put('/', (req, res) => {
      addresses.push(req.json)

      res.json({"success": true}, [
        {rel: "self", method: "GET", href: replacer(req,"/" + addresses.length)},
        {rel: "addresses", method: "GET", href: replacer(req,"/")},
        {rel: "list", method: "GET", href: replacer(req,"/list")},
      ])
    })

    app.listen(port, () => {
      console.log(`Address book listening at http://localhost:${port}`)
    })

  }
};